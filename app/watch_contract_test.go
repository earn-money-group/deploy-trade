package app

import (
	"bytes"
	"context"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/assert"
)

func TestEcrecover(t *testing.T) {
	client, err := ethclient.Dial("https://rpc.ankr.com/eth")
	assert.NoError(t, err)
	tx, _, err := client.TransactionByHash(context.Background(), common.HexToHash("0x5780bdd09aa017997791a1aee75f5db591b1cc115d4b98f7ee32433cd12a089e"))
	assert.NoError(t, err)
	chainId, err := client.ChainID(context.Background())
	assert.NoError(t, err)
	from := getFrom(tx, chainId)
	t.Log(from)
}

var testCode = `0x608060405234801561001057600080fd5b50600436106100e65760003560e01c806306fdde03146100eb578063095ea7b31461010957806318160ddd1461012c57806323b872dd1461013e578063313ce56714610151578063355274ea146101605780633950935114610168578063498a4c2d1461017b5780635207d321146101a257806361bc221a146101b25780636dbe5554146101bb57806370a08231146101e257806395d89b411461020b578063a0712d6814610213578063a457c2d714610228578063a9059cbb1461023b578063ba3ec7411461024e578063dd62ed3e14610256575b600080fd5b6100f3610269565b6040516101009190610aea565b60405180910390f35b61011c610117366004610b54565b6102fb565b6040519015158152602001610100565b6002545b604051908152602001610100565b61011c61014c366004610b7e565b610315565b60405160128152602001610100565b610130610339565b61011c610176366004610b54565b61035d565b6101307f000000000000000000000000000000000000000000000000000000000000000181565b610130680ad78ebc5ac620000081565b61013060055481565b6101307f000000000000000000000000000000000000000000000000000000000000000181565b6101306101f0366004610bba565b6001600160a01b031660009081526020819052604090205490565b6100f361037f565b610226610221366004610bdc565b61038e565b005b61011c610236366004610b54565b610526565b61011c610249366004610b54565b6105a1565b6100f36105af565b610130610264366004610bf5565b6105cb565b60606003805461027890610c28565b80601f01602080910402602001604051908101604052809291908181526020018280546102a490610c28565b80156102f15780601f106102c6576101008083540402835291602001916102f1565b820191906000526020600020905b8154815290600101906020018083116102d457829003601f168201915b5050505050905090565b6000336103098185856105f6565b60019150505b92915050565b60003361032385828561071a565b61032e858585610794565b506001949350505050565b7f00000000000000000000000000000000000000000059da06d6d6068e9200000090565b60003361030981858561037083836105cb565b61037a9190610c78565b6105f6565b60606004805461027890610c28565b7f000000000000000000000000000000000000000000000000000000000000000143116103f85760405162461bcd60e51b81526020600482015260136024820152721b5a5b9d081b9bdd081858dd1a5d99481e595d606a1b60448201526064015b60405180910390fd5b600081118015610408575060c481105b61044a5760405162461bcd60e51b8152602060048201526013602482015272706f776572206f7574206f6620626f756e647360681b60448201526064016103ef565b32331461048d5760405162461bcd60e51b81526020600482015260116024820152701bdb9b1e481153d05cc8185b1b1bddd959607a1b60448201526064016103ef565b610495610339565b6104a882680ad78ebc5ac6200000610c8b565b6002546104b59190610c78565b11156104fe5760405162461bcd60e51b815260206004820152601860248201527706d696e74696e6720776f756c6420657863656564206361760441b60448201526064016103ef565b61050781610938565b6105233361051e83680ad78ebc5ac6200000610c8b565b6109bb565b50565b6000338161053482866105cb565b9050838110156105945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103ef565b61032e82868684036105f6565b600033610309818585610794565b6040518060600160405280603a8152602001610cbc603a913981565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106585760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103ef565b6001600160a01b0382166106b95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103ef565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061072684846105cb565b9050600019811461078e57818110156107815760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ef565b61078e84848484036105f6565b50505050565b6001600160a01b0383166107f85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103ef565b6001600160a01b03821661085a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103ef565b6001600160a01b038316600090815260208190526040902054818110156108d25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103ef565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361078e565b60005b610965827f0000000000000000000000000000000000000000000000000000000000000001610c8b565b8110156109b75760016006600060056000815461098190610ca2565b918290555081526020810191909152604001600020805460ff1916911515919091179055806109af81610ca2565b91505061093b565b5050565b6109b782826109c8610339565b816109d260025490565b6109dc9190610c78565b1115610a265760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016103ef565b6109b782826001600160a01b038216610a815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ef565b8060026000828254610a939190610c78565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b81811015610b1757858101830151858201604001528201610afb565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b4f57600080fd5b919050565b60008060408385031215610b6757600080fd5b610b7083610b38565b946020939093013593505050565b600080600060608486031215610b9357600080fd5b610b9c84610b38565b9250610baa60208501610b38565b9150604084013590509250925092565b600060208284031215610bcc57600080fd5b610bd582610b38565b9392505050565b600060208284031215610bee57600080fd5b5035919050565b60008060408385031215610c0857600080fd5b610c1183610b38565b9150610c1f60208401610b38565b90509250929050565b600181811c90821680610c3c57607f821691505b602082108103610c5c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561030f5761030f610c62565b808202811582820484141761030f5761030f610c62565b600060018201610cb457610cb4610c62565b506001019056fe404d724a61636b4c6576696e204061636b65626f6d20406c62656c7961657620404a616d6d614265616e73206661697263727970746f2e6f7267a2646970667358221220ca0981e6c94e1c4df606b20f0cf6611156e8487e27d17a1f8227f8abaa8fa7aa64736f6c63430008110033`

func TestBytesContains(t *testing.T) {
	code := hexutil.MustDecode(testCode)
	assert.True(
		t,
		bytes.Contains(code, common.Hex2Bytes("0x404d724a61636b4c6576696e204061636b65626f6d20406c62656c7961657620404a616d6d614265616e73206661697263727970746f2e6f7267")),
	)

}
